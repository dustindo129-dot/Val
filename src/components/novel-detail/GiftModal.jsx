import React, { useState, useEffect } from 'react';
import { useAuth } from '../../context/AuthContext';
import axios from 'axios';
import config from '../../config/config';
import '../../styles/components/GiftModal.css';

const GiftModal = ({ isOpen, onClose, novelId, onGiftSuccess }) => {
  const { user, isAuthenticated } = useAuth();
  const [gifts, setGifts] = useState([]);
  const [selectedGift, setSelectedGift] = useState(null);
  const [userBalance, setUserBalance] = useState(0);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  // Fetch gifts and user balance when modal opens
  useEffect(() => {
    if (isOpen && isAuthenticated) {
      fetchGifts();
      fetchUserBalance();
    }
  }, [isOpen, isAuthenticated]);

  const fetchGifts = async () => {
    try {
      const response = await axios.get(`${config.backendUrl}/api/gifts`);
      setGifts(response.data);
    } catch (error) {
      console.error('Error fetching gifts:', error);
      setError('Kh√¥ng th·ªÉ t·∫£i danh s√°ch qu√† t·∫∑ng');
    }
  };

  const fetchUserBalance = async () => {
    try {
      const response = await axios.get(
        `${config.backendUrl}/api/users/${user.username}/profile`,
        { headers: { Authorization: `Bearer ${localStorage.getItem('token')}` } }
      );
      setUserBalance(response.data.balance || 0);
    } catch (error) {
      console.error('Error fetching user balance:', error);
    }
  };

  const handleGiftSelect = (gift) => {
    setSelectedGift(gift);
    setError('');
  };

  const handleSendGift = async () => {
    if (!selectedGift) {
      setError('Vui l√≤ng ch·ªçn m·ªôt m√≥n qu√†');
      return;
    }

    if (userBalance < selectedGift.price) {
      setError(`S·ªë d∆∞ kh√¥ng ƒë·ªß. B·∫°n c·∫ßn ${selectedGift.price} üåæ nh∆∞ng ch·ªâ c√≥ ${userBalance} üåæ`);
      return;
    }

    // Show confirmation dialog
    const balanceAfter = userBalance - selectedGift.price;
    const confirmMessage = `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën t·∫∑ng ${selectedGift.icon} ${selectedGift.name} v·ªõi gi√° ${selectedGift.price} üåæ?\n\n` +
      `S·ªë d∆∞ hi·ªán t·∫°i: ${userBalance} üåæ\n` +
      `S·ªë d∆∞ sau khi t·∫∑ng: ${balanceAfter} üåæ\n\n` +
      `L∆∞u √Ω: Qu√† t·∫∑ng s·∫Ω kh√¥ng ƒë∆∞·ª£c th√™m v√†o Kho l√∫a.`;

    if (!window.confirm(confirmMessage)) {
      return;
    }

    setLoading(true);
    setError('');

    try {
      const response = await axios.post(
        `${config.backendUrl}/api/gifts/send`,
        {
          novelId,
          giftId: selectedGift._id
        },
        { headers: { Authorization: `Bearer ${localStorage.getItem('token')}` } }
      );

      // Update local user balance
      setUserBalance(response.data.userBalanceAfter);

      // Show success message
      alert(response.data.message);

      // Call success callback to refresh novel data
      if (onGiftSuccess) {
        onGiftSuccess();
      }

      // Close modal
      onClose();
    } catch (error) {
      console.error('Error sending gift:', error);
      setError(error.response?.data?.message || 'L·ªói khi g·ª≠i qu√† t·∫∑ng');
    } finally {
      setLoading(false);
    }
  };

  const handleClose = () => {
    setSelectedGift(null);
    setError('');
    onClose();
  };

  if (!isOpen) return null;

  return (
    <div className="gift-modal-overlay" onClick={handleClose}>
      <div className="gift-modal-content" onClick={(e) => e.stopPropagation()}>
        <div className="gift-modal-header">
          <h3>T·∫∑ng qu√† cho truy·ªán</h3>
          <button className="gift-modal-close" onClick={handleClose}>
            <i className="fas fa-times"></i>
          </button>
        </div>

        <div className="gift-modal-body">
          {!isAuthenticated ? (
            <div className="gift-auth-required">
              <p>Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ t·∫∑ng qu√†</p>
            </div>
          ) : (
            <>
              <div className="gift-user-balance">
                <div className="balance-info">
                  <i className="fas fa-seedling"></i>
                  <span>S·ªë d∆∞ c·ªßa b·∫°n: {userBalance.toLocaleString()} üåæ</span>
                </div>
              </div>

              {error && (
                <div className="gift-error-message">
                  {error}
                </div>
              )}

              <div className="gift-selection">
                <h4>Ch·ªçn m√≥n qu√†:</h4>
                <div className="gift-grid">
                  {gifts.map((gift) => (
                    <div
                      key={gift._id}
                      className={`gift-option ${selectedGift?._id === gift._id ? 'selected' : ''} ${userBalance < gift.price ? 'disabled' : ''}`}
                      onClick={() => userBalance >= gift.price && handleGiftSelect(gift)}
                    >
                      <div className="gift-icon">{gift.icon}</div>
                      <div className="gift-name">{gift.name}</div>
                      <div className="gift-price">{gift.price} üåæ</div>
                      {userBalance < gift.price && (
                        <div className="gift-insufficient">Kh√¥ng ƒë·ªß üåæ</div>
                      )}
                    </div>
                  ))}
                </div>
              </div>

              {selectedGift && (
                <div className="gift-selected-info">
                  <h4>M√≥n qu√† ƒë√£ ch·ªçn:</h4>
                  <div className="selected-gift-display">
                    <span className="selected-gift-icon">{selectedGift.icon}</span>
                    <span className="selected-gift-name">{selectedGift.name}</span>
                    <span className="selected-gift-price">{selectedGift.price} üåæ</span>
                  </div>
                  <div className="gift-note">
                    <i className="fas fa-info-circle"></i>
                    <span>Qu√† t·∫∑ng tr·ª±c ti·∫øp d√†nh cho d·ªãch gi·∫£/t√°c gi·∫£, kh√¥ng ƒë∆∞·ª£c th√™m v√†o Kho l√∫a</span>
                  </div>
                </div>
              )}

              <div className="gift-modal-actions">
                <button
                  className="btn btn-secondary"
                  onClick={handleClose}
                  disabled={loading}
                >
                  H·ªßy
                </button>
                <button
                  className="btn btn-primary"
                  onClick={handleSendGift}
                  disabled={!selectedGift || loading || userBalance < (selectedGift?.price || 0)}
                >
                  {loading ? (
                    <>
                      <i className="fas fa-spinner fa-spin"></i>
                      ƒêang g·ª≠i...
                    </>
                  ) : (
                    <>
                      <i className="fas fa-gift"></i>
                      T·∫∑ng qu√†
                    </>
                  )}
                </button>
              </div>
            </>
          )}
        </div>
      </div>
    </div>
  );
};

export default GiftModal; 