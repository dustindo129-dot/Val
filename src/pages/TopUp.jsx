import { useState, useEffect, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import { Helmet } from 'react-helmet-async';
import axios from 'axios';
import config from '../config/config';
import { translateTopUpStatus } from '../utils/statusTranslation';
import cdnConfig from '../config/bunny';
import LoadingSpinner from '../components/LoadingSpinner';
import '../styles/TopUp.css';

/**
 * TopUpSEO Component
 * 
 * Provides SEO optimization for the TopUp page including:
 * - Meta title and description
 * - Keywords
 * - Open Graph tags
 */
const TopUpSEO = () => {
  return (
    <Helmet>
      {/* Basic meta tags */}
      <title>N·∫°p L√∫a - N·∫°p Ti·ªÅn V√†o T√†i Kho·∫£n | Valvrareteam</title>
      <meta name="description" content="N·∫°p l√∫a v√†o t√†i kho·∫£n Valvrareteam ƒë·ªÉ m·ªü ch∆∞∆°ng/t·∫≠p, ƒë·ªÅ xu·∫•t truy·ªán m·ªõi, m·ªü kh√≥a ch·ª©c nƒÉng ƒë·∫∑c bi·ªát v√† h·ªó tr·ª£ d·ªãch gi·∫£/t√°c gi·∫£. Thanh to√°n nhanh ch√≥ng, an to√†n." />
      <meta name="keywords" content="n·∫°p l√∫a, n·∫°p ti·ªÅn, thanh to√°n, m·ªü ch∆∞∆°ng, ƒë·ªÅ xu·∫•t truy·ªán, h·ªó tr·ª£ d·ªãch gi·∫£, valvrareteam, light novel" />
      
      {/* Language and charset */}
      <meta httpEquiv="Content-Language" content="vi-VN" />
      <meta name="language" content="Vietnamese" />
      
      {/* Open Graph meta tags */}
      <meta property="og:title" content="N·∫°p L√∫a - N·∫°p Ti·ªÅn V√†o T√†i Kho·∫£n | Valvrareteam" />
      <meta property="og:description" content="N·∫°p l√∫a v√†o t√†i kho·∫£n Valvrareteam ƒë·ªÉ m·ªü ch∆∞∆°ng/t·∫≠p, ƒë·ªÅ xu·∫•t truy·ªán m·ªõi, m·ªü kh√≥a ch·ª©c nƒÉng ƒë·∫∑c bi·ªát v√† h·ªó tr·ª£ d·ªãch gi·∫£/t√°c gi·∫£." />
      <meta property="og:image" content="https://valvrareteam.b-cdn.net/Konachan.com_-_367009_animal_animated_bird_building_city_clouds_flowers_lennsan_no_humans_original_petals_polychromatic_reflection_scenic_sky_train_tree_water_1_u8wao6.gif" />
      <meta property="og:url" content="https://valvrareteam.net/nap-tien" />
      <meta property="og:type" content="website" />
      <meta property="og:site_name" content="Valvrareteam" />
      <meta property="og:locale" content="vi_VN" />
      
      {/* Twitter Card meta tags */}
      <meta name="twitter:card" content="summary_large_image" />
      <meta name="twitter:title" content="N·∫°p L√∫a - N·∫°p Ti·ªÅn V√†o T√†i Kho·∫£n | Valvrareteam" />
      <meta name="twitter:description" content="N·∫°p l√∫a v√†o t√†i kho·∫£n Valvrareteam ƒë·ªÉ m·ªü ch∆∞∆°ng/t·∫≠p, ƒë·ªÅ xu·∫•t truy·ªán m·ªõi, m·ªü kh√≥a ch·ª©c nƒÉng ƒë·∫∑c bi·ªát v√† h·ªó tr·ª£ d·ªãch gi·∫£/t√°c gi·∫£." />
      <meta name="twitter:image" content="https://valvrareteam.b-cdn.net/Konachan.com_-_367009_animal_animated_bird_building_city_clouds_flowers_lennsan_no_humans_original_petals_polychromatic_reflection_scenic_sky_train_tree_water_1_u8wao6.gif" />
      
      {/* Canonical URL */}
      <link rel="canonical" href="https://valvrareteam.net/nap-tien" />
    </Helmet>
  );
};

/**
 * TopUp Page Component
 * 
 * Page for users to top-up their account balance
 * 
 * @returns {JSX.Element} TopUp page component
 */
const TopUp = () => {
  const { user, isAuthenticated } = useAuth();
  const navigate = useNavigate();
  
  // All hooks must be called before any conditional returns
  const [paymentMethod, setPaymentMethod] = useState(null);
  const [selectedAmount, setSelectedAmount] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [pricingOptions, setPricingOptions] = useState([]);
  const [fetchingPricing, setFetchingPricing] = useState(true);
  const [pendingRequests, setPendingRequests] = useState([]);
  const [viewHistory, setViewHistory] = useState(false);
  const [history, setHistory] = useState([]);
  const [fetchingHistory, setFetchingHistory] = useState(false);
  const [transferContent, setTransferContent] = useState('');
  
  // Replace showQRCode boolean with modal state
  const [qrModalOpen, setQrModalOpen] = useState(false);
  const [qrCodeUrl, setQrCodeUrl] = useState('');
  
  // Track current request ID
  const [currentRequestId, setCurrentRequestId] = useState(null);
  // Add countdown timer state
  const [countdown, setCountdown] = useState(5 * 60); // 5 minutes in seconds
  const timerRef = useRef(null);
  
  // Total balance added state
  const [totalBalanceAdded, setTotalBalanceAdded] = useState(0);
  const [fetchingTotalBalance, setFetchingTotalBalance] = useState(true);

  // Form data for different payment methods
  const [formData, setFormData] = useState({
    bank: { accountNumber: '', accountName: '', bankName: '', transferContent: '' },
    prepaidCard: { cardNumber: '', cardPin: '', provider: '' }
  });

  // Setup beforeunload event listener to warn users before leaving with unsubmitted transaction
  useEffect(() => {
    const handleBeforeUnload = (e) => {
      if (currentRequestId) {
        // Standard way to show confirmation dialog
        const message = "B·∫°n ch∆∞a ho√†n th√†nh giao d·ªãch! Vui l√≤ng b·∫•m 'X√°c nh·∫≠n' tr∆∞·ªõc khi r·ªùi ƒëi.";
        e.returnValue = message; // Standard for Chrome, Firefox, IE
        return message; // For Safari
      }
    };

    window.addEventListener('beforeunload', handleBeforeUnload);
    
    return () => {
      window.removeEventListener('beforeunload', handleBeforeUnload);
    };
  }, [currentRequestId]);

  // Fetch pricing options
  useEffect(() => {
    const fetchPricing = async () => {
      try {
        setFetchingPricing(true);
        const response = await axios.get(
          `${config.backendUrl}/api/topup/pricing`,
          { headers: { Authorization: `Bearer ${localStorage.getItem('token')}` } }
        );
        setPricingOptions(response.data);
      } catch (err) {
        console.error('Failed to fetch pricing options:', err);
        setPricingOptions([
          { price: 12000, balance: 100, note: "G√≥i ch·∫∑n qu·∫£ng c√°o vƒ©nh vi·ªÖn üõ°Ô∏è" },
          { price: 20000, balance: 200, note: "G√≥i bim bim üçü" },
          { price: 50000, balance: 520, note: "G√≥i c·ªëc c√† ph√™ ‚òï" },
          { price: 100000, balance: 1100, note: "G√≥i b√°t ph·ªü üçú" },
          { price: 200000, balance: 2250, note: "G√≥i bao tr·ªçn 1 vol ti·∫øng Anh/Trung üí∏" },
          { price: 350000, balance: 4000, note: "G√≥i si√™u VIP bao tr·ªçn 1 vol ti·∫øng Nh·∫≠t üëë" }
        ]);
      } finally {
        setFetchingPricing(false);
      }
    };

    fetchPricing();
  }, []);

  // Fetch pending requests
  useEffect(() => {
    const fetchPendingRequests = async () => {
      if (!user) return;
      
      try {
        const response = await axios.get(
          `${config.backendUrl}/api/topup/pending`,
          { headers: { Authorization: `Bearer ${localStorage.getItem('token')}` } }
        );
        setPendingRequests(response.data);
      } catch (err) {
        console.error('Failed to fetch pending requests:', err);
      }
    };

    fetchPendingRequests();
  }, [user]);

  // Fetch total balance added from topup transactions
  useEffect(() => {
    const fetchTotalBalanceAdded = async () => {
      if (!user) return;
      
      try {
        setFetchingTotalBalance(true);
        
        // Get comprehensive user transactions from the same endpoint as transaction history
        const userTransactionsResponse = await axios.get(
          `${config.backendUrl}/api/transactions/user-transactions?limit=1000&offset=0&username=${user.username}`,
          { headers: { Authorization: `Bearer ${localStorage.getItem('token')}` } }
        );
        
        const userTransactions = userTransactionsResponse.data.transactions || [];
        
        // Calculate total balance added from topup and admin_topup transactions
        const totalAdded = userTransactions
          .filter(transaction => transaction.type === 'topup' || transaction.type === 'admin_topup')
          .filter(transaction => transaction.amount > 0) // Only count positive amounts
          .reduce((total, transaction) => total + transaction.amount, 0);
        
        setTotalBalanceAdded(totalAdded);
      } catch (err) {
        console.error('Failed to fetch total balance added:', err);
        setTotalBalanceAdded(0);
      } finally {
        setFetchingTotalBalance(false);
      }
    };

    fetchTotalBalanceAdded();
  }, [user]);

  // Redirect unauthenticated users
  useEffect(() => {
    if (!isAuthenticated) {
      // Simply redirect to home when user is not authenticated
      navigate('/', { replace: true });
    }
  }, [isAuthenticated, navigate]);

  // Clean up timer on component unmount
  useEffect(() => {
    return () => {
      if (timerRef.current) {
        clearInterval(timerRef.current);
      }
    };
  }, []);

  // Don't render the component if user is not authenticated
  if (!isAuthenticated) {
    return (
      <div className="top-up-container">
        <TopUpSEO />
        <div className="auth-required-message">
          <LoadingSpinner size="medium" />
        </div>
      </div>
    );
  }

  // Handle payment method selection
  const handleMethodSelect = (method) => {
    setPaymentMethod(method);
    // Reset QR code when changing payment method
    setQrCodeUrl('');
    setTransferContent('');
    setCurrentRequestId(null);
  };

  // Generate random transfer content
  const generateRandomContent = (length = 8) => {
    // Use a mix of uppercase letters and numbers
    const uppercase = 'ABCDEFGHJKLMNPQRSTUVWXYZ'; // removed I and O which can be confused with 1 and 0
    const numbers = '123456789'; // removed 0 which can be confused with O
    
    // Ensure at least one uppercase letter and one number
    let result = '';
    
    // Add at least 2 uppercase letters
    for (let i = 0; i < 3; i++) {
      result += uppercase.charAt(Math.floor(Math.random() * uppercase.length));
    }
    
    // Add at least 2 numbers
    for (let i = 0; i < 2; i++) {
      result += numbers.charAt(Math.floor(Math.random() * numbers.length));
    }
    
    // Fill remaining characters randomly
    const remaining = length - result.length;
    const allChars = uppercase + numbers;
    
    for (let i = 0; i < remaining; i++) {
      result += allChars.charAt(Math.floor(Math.random() * allChars.length));
    }
    
    // Shuffle the result to make it more random
    return result.split('').sort(() => 0.5 - Math.random()).join('');
  };

  // Handle QR modal open and start countdown
  const startCountdownTimer = () => {
    // Clear any existing timer
    if (timerRef.current) {
      clearInterval(timerRef.current);
    }
    
    // Set initial countdown time (5 minutes)
    setCountdown(5 * 60);
    
    // Start the timer
    timerRef.current = setInterval(() => {
      setCountdown(prevTime => {
        if (prevTime <= 1) {
          // Time's up, clear the interval and close the modal
          clearInterval(timerRef.current);
          setQrModalOpen(false);
          return 0;
        }
        return prevTime - 1;
      });
    }, 1000);
  };
  
  // Format countdown time as MM:SS
  const formatCountdown = (seconds) => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
  };
  
  // Check if countdown is low (less than 1 minute)
  const isCountdownLow = (seconds) => {
    return seconds < 60;
  };

  // Generate QR code and create payment request
  const generateQRCode = async () => {
    if (!selectedAmount) {
      alert('Vui l√≤ng ch·ªçn s·ªë ti·ªÅn n·∫°p');
      return;
    }

    setLoading(true);

    try {
      // Generate random transfer content
      const newTransferContent = generateRandomContent(8);
      setTransferContent(newTransferContent);

      // Create VietQR URL
      const bankId = "ICB"; // Vietinbank code
      const accountNo = "100868151423";
      const vietQrUrl = `https://img.vietqr.io/image/${bankId}-${accountNo}-compact2.png?amount=${selectedAmount.price}&addInfo=${newTransferContent}`;
      
      // Update QR code URL
      setQrCodeUrl(vietQrUrl);
      
      // Update bank form data with the new transfer content
      setFormData(prev => ({
        ...prev,
        bank: {
          ...prev.bank,
          transferContent: newTransferContent
        }
      }));

      // Create payment request immediately
      const requestData = {
        amount: selectedAmount.price,
        balance: selectedAmount.balance,
        paymentMethod: 'bank',
        details: {
          bankName: "VIETINBANK",
          accountName: "TRUONG TAN TAI",
          accountNumber: "100868151423",
          transferContent: newTransferContent
        }
      };
      
      const response = await axios.post(
        `${config.backendUrl}/api/topup/request`,
        requestData,
        { headers: { Authorization: `Bearer ${localStorage.getItem('token')}` } }
      );
      
      // Store the request ID
      setCurrentRequestId(response.data.requestId);
      
      // Open the QR modal and start countdown
      setQrModalOpen(true);
      startCountdownTimer();
      
      // Refresh pending requests
      const pendingResponse = await axios.get(
        `${config.backendUrl}/api/topup/pending`,
        { headers: { Authorization: `Bearer ${localStorage.getItem('token')}` } }
      );
      setPendingRequests(pendingResponse.data);
      
    } catch (err) {
      console.error('Failed to create QR code and payment request:', err);
      setError(err.response?.data?.message || 'Kh√¥ng th·ªÉ t·∫°o y√™u c·∫ßu thanh to√°n');
    } finally {
      setLoading(false);
    }
  };

  // Handle amount selection
  const handleAmountSelect = (option) => {
    setSelectedAmount(option);
    
    // Reset QR code when changing amount
    setQrCodeUrl('');
    setTransferContent('');
    setCurrentRequestId(null);
  };

  // Handle form input changes
  const handleInputChange = (category, field, value) => {
    setFormData(prev => ({
      ...prev,
      [category]: {
        ...prev[category],
        [field]: value
      }
    }));
  };

  // Handle QR code download
  const handleDownloadQR = async () => {
    try {
      const response = await fetch(qrCodeUrl);
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `QR-Code-${transferContent}.png`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      window.URL.revokeObjectURL(url);
    } catch (error) {
      console.error('Failed to download QR code:', error);
      alert('Kh√¥ng th·ªÉ t·∫£i xu·ªëng m√£ QR. Vui l√≤ng th·ª≠ l·∫°i.');
    }
  };

  // Handle QR modal confirm
  const handleQrConfirm = () => {
    // Clear the countdown timer
    if (timerRef.current) {
      clearInterval(timerRef.current);
    }
    
    setQrModalOpen(false);
    
    // Reset form after confirmation
    setSelectedAmount(null);
    setPaymentMethod(null);
    
    // Refresh pending requests
    refreshPendingRequests();
    
    // Notify SecondaryNavbar to refresh balance display (manual fallback)
    window.dispatchEvent(new Event('balanceUpdated'));
  };

  // Handle QR modal cancel
  const handleQrCancel = async () => {
    // Clear the countdown timer
    if (timerRef.current) {
      clearInterval(timerRef.current);
    }
    
    if (currentRequestId) {
      try {
        await axios.delete(
          `${config.backendUrl}/api/topup/request/${currentRequestId}`,
          { headers: { Authorization: `Bearer ${localStorage.getItem('token')}` } }
        );
        
        // Refresh pending requests
        refreshPendingRequests();
      } catch (err) {
        console.error('Failed to cancel request:', err);
      }
    }
    
    // Reset state
    setQrModalOpen(false);
    setQrCodeUrl('');
    setTransferContent('');
    setCurrentRequestId(null);
  };
  
  // Refresh pending requests
  const refreshPendingRequests = async () => {
    try {
      const response = await axios.get(
        `${config.backendUrl}/api/topup/pending`,
        { headers: { Authorization: `Bearer ${localStorage.getItem('token')}` } }
      );
      setPendingRequests(response.data);
    } catch (err) {
      console.error('Failed to fetch pending requests:', err);
    }
  };

  // Format price for display
  const formatPrice = (price) => {
    return new Intl.NumberFormat('vi-VN').format(price) + '‚Ç´';
  };

  // Get transaction type display text
  const getTransactionTypeText = (type) => {
    const typeMap = {
      'topup': 'N·∫°p ti·ªÅn (t·ª± ƒë·ªông)',
      'admin_topup': 'N·∫°p ti·ªÅn (admin)',
      'request': 'Y√™u c·∫ßu truy·ªán m·ªõi',
      'admin': 'ƒêi·ªÅu ch·ªânh th·ªß c√¥ng',
      'contribution': 'ƒê√≥ng g√≥p',
      'gift': 'Qu√† t·∫∑ng',
      'gift_received': 'Nh·∫≠n qu√† t·∫∑ng',
      'refund': 'Ho√†n ti·ªÅn',
      'withdrawal': 'R√∫t ti·ªÅn',
      'rental': 'M·ªü t·∫°m th·ªùi t·∫≠p',
      'open': 'M·ªü kh√≥a n·ªôi dung',
      'other': 'Kh√°c'
    };
    return typeMap[type] || type;
  };

  // Get transaction amount class based on whether it's positive or negative
  const getAmountClass = (amount) => {
    return amount >= 0 ? 'amount-positive' : 'amount-negative';
  };

  // Format date for display in Vietnamese format (DD/MM/YYYY HH:MM)
  const formatDate = (dateString) => {
    const date = new Date(dateString);
    const day = date.getDate().toString().padStart(2, '0');
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    const year = date.getFullYear();
    const hours = date.getHours().toString().padStart(2, '0');
    const minutes = date.getMinutes().toString().padStart(2, '0');
    return `${day}/${month}/${year} ${hours}:${minutes}`;
  };

  // Handle viewing transaction history
  const handleViewHistory = async () => {
    // Toggle the viewHistory state
    const newViewState = !viewHistory;
    setViewHistory(newViewState);
    
    // Only fetch data if we're showing the history
    if (newViewState) {
      setFetchingHistory(true);
      
      try {
        // Get comprehensive user transactions from the same endpoint as admin panel
        const userTransactionsResponse = await axios.get(
          `${config.backendUrl}/api/transactions/user-transactions?limit=50&offset=0&username=${user.username}`,
          { headers: { Authorization: `Bearer ${localStorage.getItem('token')}` } }
        );
        
        // Also get TopUpRequest history for pending requests
        const topUpHistoryResponse = await axios.get(
          `${config.backendUrl}/api/topup/history`,
          { headers: { Authorization: `Bearer ${localStorage.getItem('token')}` } }
        );
        
        // Combine both types of transactions
        const userTransactions = userTransactionsResponse.data.transactions || [];
        const topUpHistory = topUpHistoryResponse.data || [];
        
        // Set comprehensive history data
        setHistory(userTransactions);
        
        // Extract pending requests for cancel functionality
        const pendingRequests = topUpHistory.filter(item => item.status === 'Pending');
        setPendingRequests(pendingRequests);
        
        // Refresh total balance added when viewing history for the first time
        await refreshTotalBalanceAdded();
      } catch (err) {
        console.error('Failed to fetch history:', err);
        // Fallback to original TopUp history if user transactions fail
        try {
          const historyResponse = await axios.get(
            `${config.backendUrl}/api/topup/history`,
            { headers: { Authorization: `Bearer ${localStorage.getItem('token')}` } }
          );
          setHistory(historyResponse.data);
          const pendingRequests = historyResponse.data.filter(item => item.status === 'Pending');
          setPendingRequests(pendingRequests);
        } catch (fallbackErr) {
          console.error('Failed to fetch fallback history:', fallbackErr);
        }
      } finally {
        setFetchingHistory(false);
      }
    }
  };

  // Handle canceling a pending request
  const handleCancelRequest = async (requestId) => {
    if (!confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën h·ªßy y√™u c·∫ßu n√†y kh√¥ng?')) {
      return;
    }
    
    try {
      await axios.delete(
        `${config.backendUrl}/api/topup/request/${requestId}`,
        { headers: { Authorization: `Bearer ${localStorage.getItem('token')}` } }
      );
      
      // Update pending requests
      setPendingRequests(pendingRequests.filter(req => req._id !== requestId));
      
      alert('Y√™u c·∫ßu ƒë√£ ƒë∆∞·ª£c h·ªßy th√†nh c√¥ng');
    } catch (err) {
      console.error('Kh√¥ng th·ªÉ h·ªßy y√™u c·∫ßu:', err);
      alert(err.response?.data?.message || 'Kh√¥ng th·ªÉ h·ªßy y√™u c·∫ßu');
    }
  };

  // Refresh total balance added
  const refreshTotalBalanceAdded = async () => {
    if (!user) return;
    
    try {
      // Get comprehensive user transactions from the same endpoint as transaction history
      const userTransactionsResponse = await axios.get(
        `${config.backendUrl}/api/transactions/user-transactions?limit=1000&offset=0&username=${user.username}`,
        { headers: { Authorization: `Bearer ${localStorage.getItem('token')}` } }
      );
      
      const userTransactions = userTransactionsResponse.data.transactions || [];
      
      // Calculate total balance added from topup and admin_topup transactions
      const totalAdded = userTransactions
        .filter(transaction => transaction.type === 'topup' || transaction.type === 'admin_topup')
        .filter(transaction => transaction.amount > 0) // Only count positive amounts
        .reduce((total, transaction) => total + transaction.amount, 0);
      
      setTotalBalanceAdded(totalAdded);
    } catch (err) {
      console.error('Failed to refresh total balance added:', err);
    }
  };

  // Refresh transaction history without toggling visibility
  const refreshHistory = async () => {
    setFetchingHistory(true);
    
    try {
      // Get comprehensive user transactions from the same endpoint as admin panel
      const userTransactionsResponse = await axios.get(
        `${config.backendUrl}/api/transactions/user-transactions?limit=50&offset=0&username=${user.username}`,
        { headers: { Authorization: `Bearer ${localStorage.getItem('token')}` } }
      );
      
      // Also get TopUpRequest history for pending requests
      const topUpHistoryResponse = await axios.get(
        `${config.backendUrl}/api/topup/history`,
        { headers: { Authorization: `Bearer ${localStorage.getItem('token')}` } }
      );
      
      // Combine both types of transactions
      const userTransactions = userTransactionsResponse.data.transactions || [];
      const topUpHistory = topUpHistoryResponse.data || [];
      
      // Set comprehensive history data
      setHistory(userTransactions);
      
      // Extract pending requests for cancel functionality
      const pendingRequests = topUpHistory.filter(item => item.status === 'Pending');
      setPendingRequests(pendingRequests);
      
      // Refresh total balance added when refreshing history
      await refreshTotalBalanceAdded();
      
      // Notify SecondaryNavbar to refresh balance display (manual fallback)
      window.dispatchEvent(new Event('balanceUpdated'));
    } catch (err) {
      console.error('Failed to fetch history:', err);
      // Fallback to original TopUp history if user transactions fail
      try {
        const historyResponse = await axios.get(
          `${config.backendUrl}/api/topup/history`,
          { headers: { Authorization: `Bearer ${localStorage.getItem('token')}` } }
        );
        setHistory(historyResponse.data);
        const pendingRequests = historyResponse.data.filter(item => item.status === 'Pending');
        setPendingRequests(pendingRequests);
      } catch (fallbackErr) {
        console.error('Failed to fetch fallback history:', fallbackErr);
      }
    } finally {
      setFetchingHistory(false);
    }
  };

  return (
    <div className="top-up-container">
      <TopUpSEO />
      <h1>N·∫°p üåæ v√†o t√†i kho·∫£n</h1>
      
      {/* Rules section */}
      <section className="top-up-section rules-section">
        <div className="rules-list">
          <div className="rule-item">
            <span className="rule-icon">ü¶ã</span>
            <p>üåæ l√† ƒë∆°n v·ªã ti·ªÅn ·∫£o trong h·ªá th·ªëng</p>
          </div>
          <div className="rule-item">
            <span className="rule-icon">ü¶ã</span>
            <p>üåæ ch·ªâ c√≥ th·ªÉ ƒë∆∞·ª£c d√πng ƒë·ªÉ m·ªü ch∆∞∆°ng/t·∫≠p, ƒë·ªÅ xu·∫•t truy·ªán, m·ªü kh√≥a ch·ª©c nƒÉng, v√† h·ªó tr·ª£ d·ªãch gi·∫£/t√°c gi·∫£</p>
          </div>
          <div className="rule-item">
            <span className="rule-icon">ü¶ã</span>
            <p>üåæ ƒë√£ n·∫°p kh√¥ng th·ªÉ ho√†n l·∫°i d√π b·∫•t c·ª© l√Ω do g√¨</p>
          </div>
          <div className="rule-item">
            <span className="rule-icon">ü¶ã</span>
            <p>üåæ s·∫Ω ƒë∆∞·ª£c th√™m v√†o t√†i kho·∫£n c·ªßa b·∫°n sau khi ch√∫ng t√¥i x√°c nh·∫≠n thanh to√°n</p>
          </div>
          <div className="rule-item">
            <span className="rule-icon">ü¶ã</span>
            <p>B·∫°n c√≥ th·ªÉ mua üåæ b·∫±ng c√°c ph∆∞∆°ng th·ª©c thanh to√°n d∆∞·ªõi ƒë√¢y</p>
          </div>
          <div className="rule-item">
            <span className="rule-icon">ü¶ã</span>
            <p>N·∫øu b·∫°n s·ª≠ d·ª•ng c√°c ph∆∞∆°ng th·ª©c thanh to√°n kh√°c nh∆∞ Visa/Mastercard/Paypal/Vcoin..., vui l√≤ng li√™n h·ªá <a href="https://www.facebook.com/profile.php?id=100064392503502" target="_blank" rel="noopener noreferrer" style={{ textDecoration: "none" }}>fanpage</a> ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£</p>
          </div>
          <div className="rule-item">
            <span className="rule-icon">ü¶ã</span>
            <p><strong>M√£ QR chuy·ªÉn kho·∫£n ng√¢n h√†ng c√≥ h·ªó tr·ª£ Momo v√† ZaloPay (qu√©t ƒë∆∞·ª£c)</strong></p>
          </div>
        </div>
        
      </section>

      <div className="top-up-content">
        {/* Payment method selection */}
        <section className="top-up-section">
          <h2>Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n</h2>
          <div className="payment-methods">
            <div 
              className={`payment-method-card ${paymentMethod === 'bank' ? 'selected' : ''}`}
              onClick={() => handleMethodSelect('bank')}
            >
              <div className="payment-logos">
                <div className="payment-logo">
                  <img src={cdnConfig.getOptimizedImageUrl("vietinbank.jpg", cdnConfig.imageClasses.avatar)} alt="Banks" />
                </div>
              </div>
              <p>Chuy·ªÉn kho·∫£n ng√¢n h√†ng</p>
            </div>

            <div 
              className={`payment-method-card ${paymentMethod === 'prepaidCard' ? 'selected' : ''}`}
              onClick={() => handleMethodSelect('prepaidCard')}
            >
              <div className="payment-logos">
                <div className="payment-logo">
                  <img src={cdnConfig.getOptimizedImageUrl("viettel.png", cdnConfig.imageClasses.avatar)} alt="Viettel" />
                </div>
                <div className="payment-logo">
                  <img src={cdnConfig.getOptimizedImageUrl("mobiphone.png", cdnConfig.imageClasses.avatar)} alt="Mobiphone" />
                </div>
              </div>
              <p>Th·∫ª tr·∫£ tr∆∞·ªõc (Th·∫ª c√†o)</p>
            </div>
          </div>
        </section>

        {/* Payment details section - shown only when a payment method is selected */}
        {paymentMethod && (
          <section className="top-up-section">
            <h2>Chi ti·∫øt thanh to√°n</h2>
            
            {/* Select Amount section as radio options - only for bank payments */}
            {paymentMethod === 'bank' && (
              <div className="amount-selection">
                <h3>Ch·ªçn s·ªë ti·ªÅn</h3>
                <div className="amount-options">
                  {pricingOptions.map((option, index) => (
                    <label key={index} className="amount-option">
                      <input 
                        type="radio" 
                        name="amount" 
                        checked={selectedAmount === option}
                        onChange={() => handleAmountSelect(option)}
                      />
                      <div className="option-details">
                        <span className="option-price">{formatPrice(option.price)}</span>
                        <span className="option-balance">{option.balance} üåæ</span>
                        <span className="option-note">{option.note}</span>
                      </div>
                    </label>
                  ))}
                </div>
              </div>
            )}
            
            {/* Bank transfer details */}
            {paymentMethod === 'bank' && (
              <div className="payment-details">
                <div className="bank-details-container">
                  <div className="bank-instructions-column">
                    <div className="bank-instructions">
                      <p>T·∫°o m√£ QR ƒë·ªÉ chuy·ªÉn kho·∫£n:</p>
                      
                      {/* QR code generate button */}
                      <button 
                        className="qr-button" 
                        onClick={generateQRCode} 
                        disabled={!selectedAmount || loading}
                      >
                        {loading ? 'ƒêang t·∫°o m√£...' : 'T·∫°o m√£ QR'}
                      </button>
                      
                      <div className="bank-transfer-info">
                        <div className="info-row">
                          <span className="info-label">Ng√¢n h√†ng:</span>
                          <span className="info-value">Vietinbank</span>
                        </div>
                        <div className="info-row">
                          <span className="info-label">T√™n ng∆∞·ªùi nh·∫≠n:</span>
                          <span className="info-value">TRUONG TAN TAI</span>
                        </div>
                        <div className="info-row">
                          <span className="info-label">S·ªë ti·ªÅn:</span>
                          <span className="info-value info-amount">
                            {selectedAmount ? formatPrice(selectedAmount.price) : 'Vui l√≤ng ch·ªçn s·ªë ti·ªÅn n·∫°p'}
                          </span>
                        </div>
                      </div>
                      
                      <div className="transfer-notes">
                        <div className="note-title">Ch√∫ √Ω</div>
                        <ol className="note-list">
                          <li>ƒê·ªÉ l√∫a ƒë∆∞·ª£c c·∫≠p nh·∫≠t nhanh v√† ch√≠nh x√°c, vui l√≤ng chuy·ªÉn kho·∫£n ƒë√∫ng s·ªë t√†i kho·∫£n, ƒë√∫ng s·ªë ti·ªÅn v√† ƒëi·ªÅn ch√≠nh x√°c n·ªôi dung chuy·ªÉn kho·∫£n (trong tr∆∞·ªùng h·ª£p kh√¥ng th·ªÉ qu√©t m√£ QR).</li>
                          <li>S·ªë d∆∞ s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t khi b·∫°n ƒêƒÇNG NH·∫¨P L·∫†I sau khi chuy·ªÉn kho·∫£n th√†nh c√¥ng.</li>
                          <li>
                            N·∫øu c√≥ th·∫Øc m·∫Øc v·ªÅ v·∫•n ƒë·ªÅ chuy·ªÉn kho·∫£n ho·∫∑c ch∆∞a nh·∫≠n ƒë∆∞·ª£c üåæ 1h sau khi thanh to√°n v√† ƒë√£ ƒëƒÉng nh·∫≠p l·∫°i, vui l√≤ng inbox fanpage{' '}  
                            <a href="https://www.facebook.com/profile.php?id=100064392503502" target="_blank" rel="noopener noreferrer" style={{ textDecoration: "none" }}>
                              H·ªôi nh·ªØng ng∆∞·ªùi y√™u th√≠ch Light Novel
                            </a>{' '}
                             ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.
                          </li>
                        </ol>
                      </div>
                    </div>
                  </div>
                  
                  <div className="support-message-column">
                    <div className="support-message">
                      <div className="support-heart">üíó</div>
                      <h3 className="support-title">Valvrareteam t·ªìn t·∫°i l√† nh·ªù c√≥ b·∫°n!</h3>
                      <div className="support-content">
                        <p>
                          Valvrareteam ch√≠nh th·ª©c quay tr·ªü l·∫°i v√†o nƒÉm 2025 v·ªõi mong mu·ªën x√¢y d·ª±ng m·ªôt c·ªông ƒë·ªìng 
                          Light Novel cho th·∫ø h·ªá m·ªõi, thu h√∫t nhi·ªÅu ƒë·ªôc gi·∫£ c≈©ng nh∆∞ d·ªãch gi·∫£/t√°c gi·∫£, v·ªõi m·ª•c ti√™u
                          l·ªõn nh·∫•t l√† ph√° v·ª° m·ªçi r√†o c·∫£n gi·ªØa th·ªã tr∆∞·ªùng Light Novel Vi·ªát Nam v√† th·∫ø gi·ªõi, t·ª©c l√† kh√¥ng 
                          c√≤n ai ph·∫£i "ƒë√≥i h√†ng" n·ªØa :))
                        </p>
                        <p>
                          Mu·ªën nu√¥i ng∆∞·ªùi tr∆∞·ªõc h·∫øt ph·∫£i nu√¥i ƒë∆∞·ª£c m√¨nh. V·ªõi m·ª•c ƒë√≠ch ban ƒë·∫ßu ch·ªâ l√† l√†m sao ƒë·ªÉ duy tr√¨ 
                          web, ƒë·ªÉ duy tr√¨ kinh ph√≠ h·ªó tr·ª£ nh·ªØng b·∫£n d·ªãch m·ªõi, v√† sau n√†y th·∫≠m ch√≠ l√† c·∫£ nh·ªØng t√°c gi·∫£ ch√≠nh
                          th·ªëng, Valvrareteam v√¥ c√πng bi·∫øt ∆°n m·ªói s·ª± ƒë√≥ng g√≥p c·ªßa c√°c b·∫°n, d√π l√† nh·ªè nh·∫•t. <span className="support-highlight-inline">M·ªói s·ª± ·ªßng h·ªô c·ªßa b·∫°n ƒë·ªÅu l√† ƒë·ªông l·ª±c l·ªõn gi√∫p Valvrareteam ng√†y c√†ng ph√°t tri·ªÉn!</span>
                        </p>
                      </div>
                      <div className="support-decoration">
                        <svg width="40" height="20" viewBox="0 0 40 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                          <path d="M2 18C6 10 14 10 20 14C26 18 34 8 38 2" stroke="#ff6b6b" strokeWidth="2" strokeLinecap="round" fill="none"/>
                        </svg>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* Prepaid card instructions */}
            {paymentMethod === 'prepaidCard' && (
              <div className="prepaid-instructions">
                <div className="prepaid-notification-list">
                  <div className="prepaid-notification-item">
                    <span className="prepaid-icon">ü¶ã</span>
                    <p>Hi·ªán t·∫°i ch·ªâ ch·∫•p nh·∫≠n th·∫ª c√†o Viettel v√† Mobiphone.</p>
                  </div>
                  <div className="prepaid-notification-item">
                    <span className="prepaid-icon">ü¶ã</span>
                    <p>Sau khi mua th·∫ª c√†o h√£y li√™n l·∫°c v·ªõi <a href="https://www.facebook.com/profile.php?id=100064392503502" target="_blank" rel="noopener noreferrer" style={{ textDecoration: "none" }}>fanpage</a> theo c√∫ ph√°p "Ad/Fanpage/Team ∆°i cho m√¨nh n·∫°p {"{m·ªánh gi√° th·∫ª c√†o}"} l√∫a v√†o t√†i kho·∫£n {"{t√™n hi·ªÉn th·ªã}"}".</p>
                  </div>
                  <div className="prepaid-notification-item">
                    <span className="prepaid-icon">ü¶ã</span>
                    <p>T√™n hi·ªÉn th·ªã n·∫±m ·ªü g√≥c tr√™n b√™n ph·∫£i m√†n h√¨nh c·ªßa b·∫°n khi truy c·∫≠p web, tr∆∞·ªùng h·ª£p t√™n ƒëƒÉng nh·∫≠p gi·ªëng t√™n hi·ªÉn th·ªã th√¨ kh√¥ng n√≥i, nh∆∞ng n·∫øu kh√°c nhau, h√£y ch·ªâ g·ª≠i t√™n hi·ªÉn th·ªã (t√™n ƒëƒÉng nh·∫≠p thu·ªôc v·ªÅ quy·ªÅn ri√™ng t∆∞ v√† team kh√¥ng c·∫ßn th√¥ng tin n√†y ƒë·ªÉ n·∫°p l√∫a cho b·∫°n).</p>
                  </div>
                  <div className="prepaid-notification-item">
                    <span className="prepaid-icon">ü¶ã</span>
                    <p>L∆∞u √Ω: Kh√¥ng g·ª≠i g√¨ th√™m sau khi inbox nh∆∞ tr√™n, ch·ªâ g·ª≠i th√¥ng tin th·∫ª c√†o sau khi ƒë√£ ƒë∆∞·ª£c rep. Sau khi ad check th·∫•y t√†i kho·∫£n c·ªßa b·∫°n c√≥ t·ªìn t·∫°i v√† th·∫ª c√†o n·∫°p th√†nh c√¥ng s·∫Ω c·ªông l√∫a th·ªß c√¥ng v√†o t√†i kho·∫£n c·ªßa b·∫°n.</p>
                  </div>
                  <div className="prepaid-notification-item">
                    <span className="prepaid-icon">ü¶ã</span>
                    <p>N·∫°p l√∫a b·∫±ng th·∫ª c√†o kh√¥ng ƒë∆∞·ª£c c·ªông bonus, m·ªánh gi√° chung 100 VNƒê = 1 l√∫a.</p>
                  </div>
                  <div className="prepaid-notification-item">
                    <span className="prepaid-icon">ü¶ã</span>
                    <p>V√¨ ƒë√¢y l√† qu√° tr√¨nh trao ƒë·ªïi l√†m th·ªß c√¥ng (kh√¥ng ph·∫£i t·ª± ƒë·ªông nh∆∞ qu√©t QR chuy·ªÉn kho·∫£n) n√™n c√≥ th·ªÉ s·∫Ω h∆°i m·∫•t th·ªùi gian mong c√°c b·∫°n th√¥ng c·∫£m!</p>
                  </div>
                </div>
              </div>
            )}

            {/* Error message */}
            {error && <div className="error-message">{error}</div>}
          </section>
        )}

        {/* QR Code Modal */}
        {qrModalOpen && (
          <div className="qr-modal-overlay">
            <div className="qr-modal-content" onClick={(e) => e.stopPropagation()}>
              <h3>Qu√©t m√£ QR ƒë·ªÉ thanh to√°n</h3>
              
              <div className="qr-code-container">
                <img src={qrCodeUrl} alt="QR Code" />
                <button className="qr-download-button" onClick={handleDownloadQR}>
                  T·∫£i m√£ QR
                </button>
              </div>
              
              <div className="transfer-info">
                <div className="transfer-info-item">
                  <span>Ng√¢n h√†ng:</span>
                  <span className="transfer-value">Vietinbank</span>
                </div>
                <div className="transfer-info-item">
                  <span>T√†i kho·∫£n nh·∫≠n:</span>
                  <span className="transfer-value">100868151423</span>
                  <button className="copy-button" onClick={() => navigator.clipboard.writeText("100868151423")}>
                    Sao ch√©p
                  </button>
                </div>
                <div className="transfer-info-item">
                  <span>T√™n ng∆∞·ªùi nh·∫≠n:</span>
                  <span className="transfer-value">TRUONG TAN TAI</span>
                </div>
                <div className="transfer-info-item">
                  <span>N·ªôi dung chuy·ªÉn kho·∫£n:</span>
                  <span className="transfer-content">{transferContent}</span>
                  <button className="copy-button" onClick={() => navigator.clipboard.writeText(transferContent)}>
                    Sao ch√©p
                  </button>
                </div>
                <div className="transfer-info-item">
                  <span>S·ªë ti·ªÅn:</span>
                  <span className="transfer-amount">{selectedAmount ? formatPrice(selectedAmount.price) : ''}</span>
                </div>
              </div>
              
              <div className="qr-countdown-container">
                <div className="qr-expiry-note">
                  <p className="qr-important">Sau khi thanh to√°n, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i ƒë·ªÉ c·∫≠p nh·∫≠t s·ªë d∆∞ nhanh nh·∫•t c√≥ th·ªÉ.</p>
                </div>
              </div>
              
              <div className="qr-modal-actions">
                <button className="qr-modal-cancel" onClick={handleQrCancel}>H·ªßy b·ªè</button>
                <button className="qr-modal-confirm" onClick={handleQrConfirm}>X√°c nh·∫≠n</button>
              </div>
            </div>
          </div>
        )}

        {/* Transaction history toggle */}
        <div className="history-toggle">
          <button 
            className="history-button"
            onClick={handleViewHistory}
          >
            {viewHistory ? '·∫®n l·ªãch s·ª≠ giao d·ªãch' : 'Xem l·ªãch s·ª≠ giao d·ªãch'}
          </button>
        </div>

                {/* Transaction history */}
        {viewHistory && (
          <section className="top-up-section">
            <div className="transaction-header-container">
              <h2>L·ªãch s·ª≠ giao d·ªãch</h2>
              <div className="transaction-header-right">
                {/* Compact total balance display */}
                <div className="total-balance-compact">
                  <span className="total-balance-compact-label">T·ªïng l√∫a ƒë√£ n·∫°p:</span>
                  {fetchingTotalBalance ? (
                    <span className="total-balance-compact-loading">‚è≥</span>
                  ) : (
                    <span className="total-balance-compact-value">
                      {totalBalanceAdded.toLocaleString('vi-VN')} üåæ
                    </span>
                  )}
                </div>
                <button 
                  className="topup-refresh-button"
                  onClick={refreshHistory}
                  disabled={fetchingHistory}
                >
                  {fetchingHistory ? 'ƒêang t·∫£i l·∫°i...' : 'T·∫£i l·∫°i l·ªãch s·ª≠'}
                </button>
              </div>
            </div>
            {fetchingHistory ? (
              <p>ƒêang t·∫£i l·ªãch s·ª≠ giao d·ªãch...</p>
            ) : history.length === 0 ? (
              <p>Kh√¥ng c√≥ l·ªãch s·ª≠ giao d·ªãch</p>
            ) : (
              <div className="transaction-history">
                {history.map(transaction => {
                  // Handle both old TopUpRequest format and new UserTransaction format
                  const isOldFormat = transaction.paymentMethod && transaction.balance;
                  
                  return (
                    <div key={transaction._id} className={`transaction-item ${isOldFormat ? `status-${transaction.status?.toLowerCase()}` : ''}`}>
                      <div className="transaction-header">
                        <div className="transaction-user">
                          <span className="transaction-id">ID: {transaction._id}</span>
                        </div>
                        <div className="transaction-date">{formatDate(transaction.createdAt)}</div>
                      </div>
                      <div className="transaction-body">
                        {isOldFormat ? (
                          // Old TopUpRequest format
                          <>
                            <div className="transaction-amounts">
                              <div className="transaction-price">{formatPrice(transaction.amount)}</div>
                              <div className="transaction-credits">
                                {transaction.balance} üåæ
                              </div>
                            </div>
                            <div className="transaction-method">
                              {transaction.paymentMethod === 'bank' 
                                ? 'Chuy·ªÉn kho·∫£n ng√¢n h√†ng' 
                                : 'Th·∫ª tr·∫£ tr∆∞·ªõc'}
                            </div>
                            <div className="transaction-status">{translateTopUpStatus(transaction.status)}</div>
                          </>
                        ) : (
                          // New UserTransaction format
                          <>
                            <div className="transaction-details">
                              <div className="transaction-type">
                                {getTransactionTypeText(transaction.type)}
                              </div>
                              <div className={`transaction-amount ${getAmountClass(transaction.amount)}`}>
                                {transaction.amount >= 0 ? '+' : ''}{transaction.amount} üåæ
                              </div>
                              <div className="transaction-balance-after">
                                S·ªë d∆∞ sau giao d·ªãch: {transaction.balanceAfter} üåæ
                              </div>
                            </div>
                            <div className="transaction-description">
                              {transaction.description}
                            </div>
                            {transaction.performedBy && (
                              <div className="transaction-admin">
                                Th·ª±c hi·ªán b·ªüi: {transaction.performedBy.displayName || transaction.performedBy.username}
                              </div>
                            )}
                          </>
                        )}
                      </div>
                      {isOldFormat && transaction.status === 'Pending' && (
                        <div className="transaction-actions">
                          <button 
                            className="cancel-button"
                            onClick={() => handleCancelRequest(transaction._id)}
                          >
                            H·ªßy b·ªè
                          </button>
                        </div>
                      )}
                    </div>
                  );
                })}
              </div>
            )}
          </section>
        )}
      </div>
    </div>
  );
};

export default TopUp;